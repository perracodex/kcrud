# Copyright (c) 2024-Present Perracodex. Use of this source code is governed by an MIT license.

database {
	username: null
	password: null

	# The database connection pool size to be used. 0 for no connection pooling.
	connectionPoolSize: 100
	connectionPoolSize: ${?KCRUD_DATABASE_CONNECTION_POOL_SIZE}

	# The minimum number of idle connections to maintain in the pool.
	minimumPoolIdle: 20
	minimumPoolIdle: ${?KCRUD_DATABASE_MINIMUM_POOL_IDLE}

	# The database connection pool timeout to be used, (ms).
	connectionPoolTimeoutMs: 30000 # 30 seconds.
	connectionPoolTimeoutMs: ${?KCRUD_DATABASE_CONNECTION_POOL_TIMEOUT_MS}

	# How many retries will be made inside any transaction block if a SQLException happens.
	# This can be overridden on a per-transaction level by specifying the 'repetitionAttempts'
	# property in a transaction block.
	transactionMaxAttempts: 3
	transactionMaxAttempts: ${?KCRUD_DATABASE_TRANSACTION_MAX_ATTEMPTS}

	# The minimum delay between transaction retries if a SQLException happens, (ms).
	# This can be overridden on a per-transaction level by setting the 'minRepetitionDelay'
	# property in a transaction block.
	transactionMinRetryDelayMs: 15 # 15 milliseconds.
	transactionMinRetryDelayMs: ${?KCRUD_DATABASE_TRANSACTION_MIN_RETRY_DELAY_MS}

	# Threshold to log queries which exceed the threshold with WARN level, (ms).
	# This can be overridden on a per-transaction level by setting the 'warnLongQueriesDuration'
	# property in a transaction block.
	warnLongQueriesDurationMs: 3000 # 3 seconds.
	warnLongQueriesDurationMs: ${?KCRUD_DATABASE_WARN_LONG_QUERIES_DURATION_MS}

	# The list of environments under which it is allowed to update the database schema.
	# Empty list means 'no' environments are allowed to update the schema, in which case
	# the schema should had been already updated before deployment.
	# Can be either a single string with semicolon delimited values, or a list of strings.
	# Choices: DEV, TEST, STAGING, PROD.
	updateSchemaEnvironments: ["DEV", "TEST", "STAGING", "PROD"]
	updateSchemaEnvironments: ${?KCRUD_DATABASE_UPDATE_SCHEMA_ENVIRONMENTS}

	# Whether to use migrations to create the database schema.
	# If true, the database schema will be created and updated automatically by the migrations.
	# If false, the database schema will be created via the exposed schema utility, yet any schema
	# changes must be handled manually.
	useMigrations: true

	# The database file name.
	name: "dbv1"
	name: ${?KCRUD_DATABASE_NAME}

	# The database location path.
	path: ${runtime.workingDir}"/database/"
	path: ${?KCRUD_DATABASE_PATH}

	# Whether the database is a local file, for example an H2 embedded database.
	# This setting is needed to determine whether to create the database path.
	isLocalFile: true
	isLocalFile: ${?KCRUD_DATABASE_IS_LOCAL_PATH}

	# The database JDBC URL.
	# In memory: "jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;"
	# Persistent: "jdbc:h2:file:"${database.path}${database.name}
	jdbcUrl: "jdbc:h2:file:"${database.path}${database.name}
	jdbcUrl: ${?KCRUD_DATABASE_JDBC_URL}

	# The database JDBC driver.
	jdbcDriver: "org.h2.Driver"
	jdbcDriver: ${?KCRUD_DATABASE_JDBC_DRIVER}
}
