# Copyright (c) 2024-Present Perracodex. Use of this source code is governed by an MIT license.
#
# suppress inspection "UnusedMessageFormatParameter" for whole file
# suppress inspection "UnusedProperty" for whole file
# suppress inspection "WrongPropertyKeyValueDelimiter" for whole file
#
# https://www.quartz-scheduler.org/documentation/2.4.0-SNAPSHOT/configuration.html
# https://documentation.softwareag.com/onlinehelp/Rohan/quartz_223/2-2-3_Quartz_Scheduler_Configuration_Guide.pdf
# https://www.quartz-scheduler.org/documentation/quartz-2.3.0/configuration/ConfigJDBCJobStoreClustering.html

#============================================================================
# Configure Main Scheduler Properties
#============================================================================

# The unique name for your scheduler instance, useful for identification in logs.
org.quartz.scheduler.instanceName=KcrudScheduler
# Automatically generates a unique ID for this scheduler instance, essential when using clustering.
org.quartz.scheduler.instanceId=AUTO
# Disables Quartz's check for updates on startup to improve performance and avoid unnecessary network calls.
org.quartz.scheduler.skipUpdateCheck=true
# Ensures that the scheduler's threads inherit the context class loader of the thread that initializes the scheduler.
# Needed to allow loading classes from the same classloader as the application.
org.quartz.scheduler.threadsInheritContextClassLoaderOfInitializer=true
# Specifies the mechanism Quartz uses to load classes and resources;
# using InitThreadContextClassLoadHelper ensures compatibility with certain class-loading environments.
org.quartz.scheduler.classLoadHelper.class=org.quartz.simpl.InitThreadContextClassLoadHelper
#============================================================================
# Configure ThreadPool
#============================================================================
# Specifies that Quartz should use the SimpleThreadPool,
# a basic thread pool implementation suitable for most applications.
org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
# Sets the number of worker threads available for executing jobs;
# increasing this number allows more concurrent job executions.
org.quartz.threadPool.threadCount=20
# Sets the priority for the worker threads (on a scale from 1 to 10); 5 is the normal priority level.
org.quartz.threadPool.threadPriority=5
# Ensures that each thread in the thread pool inherits the context class loader from the initializing thread,
# which is important for loading classes that share the same classloader as the application.
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread=true
#============================================================================
# Configure JobStore
#============================================================================
# Specifies that Quartz should use HikariCP as the connection pool provider for database connections.
# Additional HikariCP settings are configured at runtime.
org.quartz.dataSource.kcrudDatabase.provider=hikaricp
# Sets the amount of time in milliseconds that a trigger can be late before it's considered misfired;
# 60000 means triggers more than 60 seconds late are misfires.
org.quartz.jobStore.misfireThreshold=60000
# Specifies that Quartz should use the JobStoreTX job store,
# which manages job persistence in a relational database and supports transactions.
org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
# Enables clustering, allowing multiple scheduler instances to work together
# and share the load by using the same database.
org.quartz.jobStore.isClustered=true
# Defines how often (in milliseconds) scheduler instances in a cluster check in with
# each other to indicate they are running.
# Changing this value affects the quickness of detecting failed instances.
# Increasing this value will make node A and node B check-in time's gaps larger, giving the nodes more time to check in.
# Increasing this value will increase the time for job failover in the case of an actual node failure.
org.quartz.jobStore.clusterCheckinInterval=30000

# Specifies the delegate class that Quartz uses to interact with the database;
# StdJDBCDelegate is suitable for most standard databases.
org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
# References the data source configuration named 'kcrudDatabase' for database connections.
# The actual connection properties (driver, URL, etc.) for 'kcrudDatabase' are injected at runtime.
# See: SchedulerConfig
org.quartz.jobStore.dataSource=kcrudDatabase
# Sets the prefix for Quartz's database tables;
# when the tables are prefixed with 'QRTZ_', this ensures Quartz looks for the correct tables.
org.quartz.jobStore.tablePrefix=QRTZ_
